;;; # CIM Portfolio
;;; karanvs@connect.hku.hk Karanveer Singh
;;; ### Required packages

(ns cim_portfolio.portfolio
  (:require [cim_portfolio.util :as util]
            [cim_portfolio.yfinanceclient :as client]
            [cim_portfolio.plot :as plot]
            [clojure.math :as math]
            ))

;;; ### Portfolio Analysis Helper Functions

;; Computes arithmetic, log, and cumulative return for a given list of prices
(defn calculate-returns [prices]
  (let [price-changes (map #(double (/ (second %) (first %))) (partition 2 1 prices))
        arithmetic-returns (mapv #(- % 1.0) price-changes)
        log-returns (mapv #(Math/log %) price-changes)
        cumulative-log-return (reduce + log-returns)]
    {
     :cumulative-return cumulative-log-return
     :arithmetic-returns arithmetic-returns
     :log-returns log-returns
     }))

;; Variation of the above function - additionally associates the returns with their corresponding date
(defn calculate-returns-with-corresponding-date [prices dates]
  (let [price-changes (map #(double (/ (second %) (first %))) (partition 2 1 prices))
        arithmetic-returns (mapv #(- % 1.0) price-changes)
        log-returns (mapv #(Math/log %) price-changes)
        cumulative-log-return (reduce + log-returns)]
    {
     :cumulative-return cumulative-log-return
     :arithmetic-returns (util/sort-map-by-date (zipmap (rest dates) arithmetic-returns))
     :log-returns (util/sort-map-by-date (zipmap (rest dates) log-returns))
     }))

;; Calculates portfolio return - accepts map {:stock cash-invested} and stock-performance generated by calculate-returns
(defn calculate-portfolio-return [cash-invested returns]
  (let [total-investment (apply + (vals cash-invested))]
    (->> cash-invested
         (map (fn [[security invested]]
                (let [weight (/ invested total-investment)
                      return (:cumulative-return (get returns security))]
                  (* weight return))))
         (apply +))))

;; Calculates cumulative return UP TILL a given date
(defn get-cumulative-return-till-given-date [cumulative-returns date]
  (util/sum-up-to-key date cumulative-returns)
)

;; Only calculates portfolio return up till a given date
(defn calculate-portfolio-return-for-given-date [cash-invested returns date]
  (let [total-investment (apply + (vals cash-invested))]
    (->> cash-invested
         (map (fn [[security invested]]
                (let [weight (/ invested total-investment)
                      return (get-cumulative-return-till-given-date (:log-returns (get returns security)) date)
                     ]
                  (* weight return))))
         (apply +))))

; Calculates the annualized return of the portfolio (accepts the starting value, ending value of portfolio, the start and end date)
(defn calculate-annualized-return [starting-value ending-value start-date end-date]
  (let [return (/ (- ending-value starting-value) starting-value)
        number-of-days (util/number-of-days-between start-date end-date)
       ]
    (- (math/pow (+ 1 return) (/ 365 number-of-days)) 1)
  )
)

; Calculates the volatility of a given list of prices (expected input: portfolio value list)
(defn volatility [prices]
  (let [daily-returns (:arithmetic-returns (calculate-returns prices))
        volatility (* 100 (util/std-dev daily-returns))
       ]
    volatility
  )
)

; Calculates the annualized volatility for a given sliding window-size
(defn rolling-annualized-volatility [prices window-size]
  (let [returns (:arithmetic-returns (calculate-returns prices))
        scaling-factor (Math/sqrt 252)
       ]
    (->> returns
         (partition window-size 1)
         (map util/std-dev)
      	 (map #(* 100 % scaling-factor))
    )
  )
)

(def test-prices [100 105 110 103 108 115])

(println test-prices)

(:arithmetic-returns (calculate-returns test-prices)) ;; Daily returns (as percentage of change)

(rolling-annualized-volatility test-prices 3)

(calculate-returns test-prices)

(calculate-annualized-return 2000 2500 "2023-10-16" "2024-04-27")

;;; ### YFinance API

(client/get-ticker-price-all "NVDA" "2024-10-10")


;;; ### Portfolio Processing Section

(defn analyze-portfolio [data]
  (loop [cash 0.0
         portfolio {}
         portfolio-value {}
         current-value 0.0
         stock-performance {}
         cash-invested {}
         cash-invested-by-date {}
         data (rest data)]
    (if (empty? data)
      [cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance]
      (let [[date action amount ticker] (first data)
            ticker-prices (client/get-ticker-price-all ticker (util/parse-date date))
            executed-date (first (first ticker-prices))				; gets the date the buy/sell order is executed
            ]
        (cond
          (= (clojure.string/lower-case action) "buy")
          (if (pos? (Double. amount))
            (let [price (second (first ticker-prices))        			; Gets open price of next trading day
                  currPrice (nth (last ticker-prices) 2)				; Gets adj close price of latest day
                  prices (mapv #(nth % 2) ticker-prices)       			; Extracts the prices from ticker-prices
                  amounts (repeatedly (count prices) #(Double. amount))	; Repeats amount for num of trading days
                  trading-dates (mapv #(first %) ticker-prices)
                  ]
              (recur (- cash (* (Double. amount) price))
                     (assoc portfolio ticker (+ (get portfolio ticker 0) (Double. amount)))
                     (merge-with + portfolio-value (zipmap (map first ticker-prices) 
                                                           (map #(- % (* (Double. amount) price))(map * prices amounts)))) 
                     ; Updates portfolio-value with the calculated values
                     (+ current-value (* (Double. amount) currPrice))
                     
                     (assoc stock-performance ticker (calculate-returns-with-corresponding-date prices trading-dates))
                     (assoc cash-invested ticker (+ (get cash-invested ticker 0) (* (Double. amount) price)))
                     (assoc cash-invested-by-date executed-date (assoc cash-invested ticker (+ (get cash-invested ticker 0) (* (Double. amount) price))))
                     (rest data)))
            (recur cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance (rest data)))

          (= (clojure.string/lower-case action) "sell")
          (let [price (second (first ticker-prices))
                currPrice (second (last ticker-prices))
                prices (map second ticker-prices)
                amounts (repeatedly (count prices) #(Double. amount))
                trading-dates (mapv #(first %) ticker-prices)
                ]
            (recur (+ cash (* (Double. amount) price))
                   (assoc portfolio ticker (- (get portfolio ticker 0) (Double. amount)))
                   (merge-with + portfolio-value (zipmap (map first ticker-prices) 
                                                         (map #(- (* (Double. amount) price) %) (map * prices amounts))))
                   (- current-value (* (Double. amount) currPrice))
                   
                   (assoc stock-performance ticker (calculate-returns-with-corresponding-date prices trading-dates))
                   (assoc cash-invested ticker (- (get cash-invested ticker 0) (* (Double. amount) price)))
                   (assoc cash-invested-by-date executed-date (assoc cash-invested ticker (- (get cash-invested ticker 0) (* (Double. amount) price))))
                   (rest data)))
          )))))

(def portfolio-options {
                        :starting-cash 1000000
                       }
)

(def view-options {
                   :show-individual-stock-performance-by-day 	false
                   :show-cumulative-portfolio-return-by-day		true
                   :show-portfolio-value-by-day					true
                  }
)

;; Please enter the relative paths of 1 or more CSV files (in a list) containing your trades below:

(def input-files ["./examples/utilities.csv"])

(let [data (util/read-multiple-csv input-files)
      [cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance] (analyze-portfolio data)
      sorted-portfolio-value 	(map #(vector (first %) (+ (:starting-cash portfolio-options) (second %))) 
                                     (util/sort-map-by-date portfolio-value))
      cash-invested-by-dates 	(into [] cash-invested-by-date)
      current-portfolio-value 	(+ (:starting-cash portfolio-options) (+ cash current-value))
      annualized-return 		(calculate-annualized-return (:starting-cash portfolio-options) current-portfolio-value (first (first sorted-portfolio-value)) (last (last sorted-portfolio-value)))
      cumulative-portfolio-return (calculate-portfolio-return cash-invested stock-performance)
      returns-by-date 			(zipmap (map #(first %) cash-invested-by-date)(mapv #(calculate-portfolio-return-for-given-date (second %) stock-performance (first %)) cash-invested-by-dates))
      volatility 				(volatility (map second sorted-portfolio-value))
      ]
  (def portfolio-value-by-day sorted-portfolio-value)
  
  (println "Current Portfolio Value: $" 	(format "%.2f" current-portfolio-value) 
           " [Cash: ~$" 					(format "%.2f" (+ (:starting-cash portfolio-options) cash))
           "| Stocks: ~$" 					(format "%.2f" (- current-portfolio-value (+ (:starting-cash portfolio-options) 											cash))) "] \n")
  
  (println "Annualized Return of portfolio:" (format "%.2f" (* annualized-return 100)) "%\n")
  
  (println "Volatility of portfolio:" (format "%.4f" volatility) "%\n")
  (println "Annualized volatility of portfolio:" (format "%.4f" (* (Math/sqrt 252) volatility)) "%\n")
  
  (println "Portfolio (units held/shorted of each stock):" portfolio "\n")
  (println "Cash invested in each stock: " cash-invested "\n")
  (println "Cumulative Portfolio Return: " cumulative-portfolio-return "\n")
  
  (println "----------------------------------")
  (if (:show-cumulative-portfolio-return-by-day view-options) (println "Portfolio Return by date: \n" returns-by-date))
  (println "----------------------------------\n")
  
  (println "----------------------------------")
  (println "Portfolio Value Day-by-Day: ")
  (if (:show-portfolio-value-by-day view-options) 
    (run! println (map #(vector (first %) (format "%.2f" (second %))) sorted-portfolio-value))
    (println "Omitting...")
  )
  (println "----------------------------------\n")
  
  (println "----------------------------------")
  (println "Individual Stock Performance: ")
  (if (:show-individual-stock-performance-by-day view-options) 
    (clojure.pprint/pprint stock-performance)
    (println "Omitting...")
  )
  (println "----------------------------------\n")
)

;;; ### Visualization
;;; #### Portfolio Value
(plot/list-plot (cons (:starting-cash portfolio-options) (map #(second %) portfolio-value-by-day)) :joined true :plot-size 800 :x-title "Day" :y-title "Portfolio Value (in $)" :color "#7f3b08")

;; **
;;; #### 30 Day Rolling Annualized Volatility of Portfolio
;; **

;; @@
;; 21 trading days in a month therefore 21 window-size used

(plot/list-plot (rolling-annualized-volatility (map second portfolio-value-by-day) 21)
                :joined true :plot-size 800 :x-title "Time" :y-title "Annualized Volatility (in %)" :color "red") 

